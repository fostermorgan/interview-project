{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","React","useState","destination","setDestination","countries","solution","setSolution","routeSolution","useRef","useEffect","updateSolution","includes","toUpperCase","i","length","toString","current","push","Fragment","CssBaseline","Container","maxWidth","Grid","container","spacing","alignItems","item","TextField","label","id","value","onChange","e","target","aria-describedby","inputProps","Typography","map","country","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sTA6EeA,MAtEf,WAAgB,IAAD,EACyBC,IAAMC,SAAiB,IADhD,mBACNC,EADM,KACOC,EADP,KAEPC,EAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAFrE,EAGmBJ,IAAMC,SAAmB,IAH5C,mBAGNI,EAHM,KAGIC,EAHJ,KAIPC,EAAgBP,IAAMQ,OAAO,CAAC,QAEpCR,IAAMS,WAAU,WACdC,MACC,CAACR,IAEJ,IAAMQ,EAAiB,WACrB,GAAGN,EAAUO,SAAST,EAAYU,eAAe,CAE7C,GAAiC,QAA9BV,EAAYU,cACb,IAAI,IAAIC,EAAI,EAAGA,EAAIT,EAAUU,OAAQD,IAChCT,EAAUS,KAAOX,EAAYU,cAAcG,YAA+B,QAAjBX,EAAUS,IAAiC,QAAjBT,EAAUS,GAC9FN,EAAcS,QAAQC,KAAKb,EAAUS,IAC9BT,EAAUS,KAAOX,EAAYU,cAAcG,aAClDR,EAAcS,QAAQC,KAAKb,EAAUS,IACrCA,EAAIT,EAAUU,aAIlBP,EAAcS,QAAQC,KAAKb,EAAU,IAEvCE,EAAYC,EAAcS,cAG1BT,EAAcS,QAAU,CAAC,QAG/B,OACE,kBAAC,IAAME,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,YACrC,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACC,EAAA,EAAD,CACEC,MAAM,cACNC,GAAG,4BACHC,MAAO5B,EACP6B,SAAU,SAAAC,GAAC,OAAI7B,EAAe6B,EAAEC,OAAOH,QACvCI,mBAAiB,8BACjBC,WAAY,CACV,aAAc,cAKtB,kBAACb,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,WAAW,YACrC,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACS,KAAhBxB,GACC,kBAACkC,EAAA,EAAD,4BAEe,KAAhBlC,IAAuBE,EAAUO,SAAST,EAAYU,gBACrD,kBAACwB,EAAA,EAAD,kCAEe,KAAhBlC,GAAsBE,EAAUO,SAAST,EAAYU,gBACpDP,EAASgC,KAAI,SAAAC,GACX,OAAO,wBAAIC,IAAKD,GAAUA,WCtDtBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.75de779f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Grid, TextField } from '@material-ui/core';\r\n\r\nfunction App() {\r\n  const [destination, setDestination] = React.useState<string>(\"\");\r\n  const countries = [\"CAN\", \"USA\", \"MEX\", \"BLZ\", \"GTM\", \"SLV\", \"HND\", \"NIC\", \"CRI\", \"PAN\"]\r\n  const [solution, setSolution] = React.useState<string[]>([]);\r\n  const routeSolution = React.useRef([\"USA\"]);\r\n\r\n  React.useEffect(() => {\r\n    updateSolution()\r\n  }, [destination])\r\n\r\n  const updateSolution = () => {\r\n    if(countries.includes(destination.toUpperCase())){ //if a valid country     \r\n        //set route solution\r\n        if(destination.toUpperCase() !== 'CAN'){\r\n          for(let i = 2; i < countries.length; i++){\r\n            if(countries[i] !== destination.toUpperCase().toString() && countries[i] !== \"BLZ\" && countries[i] !== \"SLV\"){\r\n              routeSolution.current.push(countries[i]);\r\n            }else if(countries[i] === destination.toUpperCase().toString()){\r\n              routeSolution.current.push(countries[i]); //add the destination\r\n              i = countries.length; //found dest, exit for loop\r\n            }\r\n          }\r\n        } else {\r\n          routeSolution.current.push(countries[0]);\r\n        }\r\n        setSolution(routeSolution.current)\r\n      }else{ //if not a vlaid country, clear the solution\r\n        //clear route solution\r\n        routeSolution.current = [\"USA\"];\r\n      }\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container spacing={1} alignItems=\"flex-end\">\r\n          <Grid item>\r\n            <TextField\r\n              label=\"Destination\"\r\n              id=\"standard-adornment-weight\"\r\n              value={destination}\r\n              onChange={e => setDestination(e.target.value)}\r\n              aria-describedby=\"standard-weight-helper-text\"\r\n              inputProps={{\r\n                'aria-label': 'weight',\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={1} alignItems=\"flex-end\">\r\n          <Grid item>\r\n            {destination === \"\" && (\r\n              <Typography>Enter a destination</Typography>\r\n            )}\r\n            {destination !== \"\" && !countries.includes(destination.toUpperCase()) && (\r\n              <Typography>Enter a valid destination</Typography>\r\n            )}\r\n            {destination !== \"\" && countries.includes(destination.toUpperCase()) && (\r\n              solution.map(country => {\r\n                return <li key={country}>{country}</li>\r\n              })\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}